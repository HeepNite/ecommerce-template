// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  Male
  Female
  Kids
  Unisex
}

enum Role {
  admin
  user
}

enum Continent {
  AF
  OC
  AS
  EU
  AM
  AT
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String       @id @default(uuid())
  title       String
  description String
  gender      Gender
  inStock     Int
  price       Float        @default(0)
  sizes        Size[]       @default([])
  slug        String       @unique
  tags         String[]     @default([])
  ProductImg  ProductImg[]

  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String
  OrderItem  OrderItem[]

  @@index([gender])
}

model ProductImg {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  address UserAddress?
  Order   Order[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  addressTwo String?
  postalCode String?
  phone      String
  city       String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Country {
  id           String         @id
  name         String         @unique
  continent    Continent
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model Order {
  id            String    @id @default(uuid())
  subTotal      Float
  tax           Float
  total         Float
  itemInOrder   Int
  isPaid        Boolean   @default(false)
  paidAt        DateTime?
  transactionId String?

  createdAt DateTime @default(now())
  udpateAt  DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?
}

model OrderItem {
  id       String @unique @default(uuid())
  quantity Int
  price    Float
  size     Size

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @unique @default(uuid())
  firstName  String
  lastName   String
  address    String
  addressTwo String?
  postalCode String?
  phone      String
  city       String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
